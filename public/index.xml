<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Notes</title>
    <link>/</link>
    <description>Recent content on R Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Copyright 2018 Chun-Yu Chen</copyright>
    <lastBuildDate>Mon, 30 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>提升R Code效率的小技巧</title>
      <link>/post/%E6%8F%90%E5%8D%87r-code%E6%95%88%E7%8E%87%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%8F%90%E5%8D%87r-code%E6%95%88%E7%8E%87%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>身為R的愛好者，我們必須面對事實:R確實不是一個有效率且快速的程式語言。R的誕生本來就是為了方便資料分析、產生精美的圖表，而不是用來開發大規模的程式專案。關於R寫出來的程式為什麼先天跑得比別人慢，在著名的Advanced R一書中有一個章節細究，這有機會我們在跳坑跟大家分享。
這篇文章我們來討論，如何在你的程式碼中，改善諸多R在效率上的先天不良。本文主要參考自Colin Gillespie在DataCamp上的課程:Writing Efficient R Code。
這是一個講求速度的世界… Run!
 我們將不同的程式碼經由相同的標準進行執行速度的測試，也可以反過來用不同的硬體去測試相同的程式碼，這種在相同基準下，測試執行效率的過程稱為標竿測試(benchmarking)。測試會計算不同方法所需經過的時間(elapsed time)。
為你使用的指令測速 在R的世界中，常常一件事情有多個方法可以達成，也許你平常不會感受到，但不同方法間確實有效率的差異。當你的程式跑得太久，可以透過簡單的指令，測試不同方法間，最具效率者。microbenchmark套件提供方便的指令:microbenchmark()，可一次比較多個指令，且指定執行的次數。
# Load the microbenchmark package library(microbenchmark) ## Warning: package &amp;#39;microbenchmark&amp;#39; was built under R version 3.4.4 # Compare the two functions x &amp;lt;- runif(100) a &amp;lt;- microbenchmark(sqrt(x), x ^ 0.5) summary(a) ## expr min lq mean median uq max neval ## 1 sqrt(x) 1.4 1.5 1.982 1.60 1.8 23.4 100 ## 2 x^0.5 7.9 8.1 8.817 8.</description>
    </item>
    
    <item>
      <title>R之地獄系列-I. 未領洗者</title>
      <link>/post/r%E4%B9%8B%E5%9C%B0%E7%8D%84%E7%B3%BB%E5%88%97-i-%E6%9C%AA%E9%A0%98%E6%B4%97%E8%80%85/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/r%E4%B9%8B%E5%9C%B0%E7%8D%84%E7%B3%BB%E5%88%97-i-%E6%9C%AA%E9%A0%98%E6%B4%97%E8%80%85/</guid>
      <description>小心浮點數的圈套… 當我們跨過「阿刻戎河」(Acheron)，我們抵達了地獄第一層(Circle 1)。這裡安置了未受洗者、那些生前忽視「浮點數之神」者。這些人以為0.1 == 0.3/3為是、或是seq(0, 1, by=.1) == .3中會有一個TRUE。
《神曲》中阿刻戎河邊的擺渡者卡隆(Charon)與亡靈們
 0.1 == 0.3/3 ## [1] FALSE seq(0, 1, by=.1) == .3 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 事實上，R和多數的程式一樣，採用「浮點數計算」(Floating-point arithmetic)，這涉及到電腦儲存數字的方式與二進位法，在多數情況下運算是沒有問題，但在極端的例子中可能產生極些微的差距。下面的例子中，你以為j被你指定為0.1，但電腦不是完全以「0.1」的形式儲存，可以說很接近，但不是一模一樣。因為很接近，對大多數的運算不產生影響，所以j*10-1還是得到1。
j &amp;lt;- 0.1 j*10 - 1 ## [1] 0 我們可以稱這些存在於真實數字與電腦處理數字中的極小差異稱為numerical error，而R把他們隱藏得很好，讓我們很容易忽視浮點數的計算，而落入這層地獄中。過去曾發生過科學家忽略了浮點數計算的些微差距，而釀成大災難的例子，所以當你在做浮點數運算的時候，心中要有numerical error的概念。
以下有幾點可以幫助我們避開numerical error:
 不要使用==來比較浮點數，改用all.equal()  0.1 == 0.3/3 ## [1] FALSE all.equal(0.1, 0.3/3) ## [1] TRUE # shouldn&amp;#39;t this end with j equal to 1?</description>
    </item>
    
  </channel>
</rss>